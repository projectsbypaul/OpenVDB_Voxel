I plan to deploy my code on a HPC system via singularity.
I succesfully built my code via cmake under Ubuntu wsl.
This is my CMakeList:
cmake_minimum_required(VERSION 3.14)
project(ABC_DataPreprocessing)

set(CMAKE_CXX_STANDARD 17)

# Redirect all executables to build/bin/
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


# === Locate dependencies ===

find_path(LIBZIP_INCLUDE_DIR zip.h REQUIRED)
find_library(LIBZIP_LIBRARY zip REQUIRED)
find_package(HDF5 REQUIRED COMPONENTS C CXX)

# === JobController Executable ===
file(GLOB_RECURSE ABC_DATAPREPROCESSING_SOURCES
    ABC_DataPreprocessing/src/*.cpp
    ABC_DataPreprocessing/ABC_DataPreprocessing.cpp
)

add_executable(ABC_DataPreprocessing ${ABC_DATAPREPROCESSING_SOURCES})

target_include_directories(ABC_DataPreprocessing PRIVATE
    ABC_DataPreprocessing/include
    ${LIBZIP_INCLUDE_DIR}
    ${HDF5_INCLUDE_DIRS}
)

target_link_libraries(ABC_DataPreprocessing
    ${LIBZIP_LIBRARY}
    ${HDF5_LIBRARIES}
)

# === Logging ===
message(STATUS "libzip include dir: ${LIBZIP_INCLUDE_DIR}")
message(STATUS "libzip library: ${LIBZIP_LIBRARY}")
message(STATUS "hdf5 include dir: ${HDF5_INCLUDE_DIR}")
message(STATUS "hdf5 library: ${HDF5_LIBRARY}")
After building i check my dependencies:
pschuster@VPEPC-Schuster:/mnt/c/Users/pschuster/source/repos/OpenVDB_Voxel$ ldd build/bin/OpenVDB_Voxel
        linux-vdso.so.1 (0x00007ffe757f3000)
        libopenvdb.so.12.0 => /usr/local/lib/libopenvdb.so.12.0 (0x00007f3c8e46b000)
        libyaml-cpp.so.0.8 => /usr/local/lib/libyaml-cpp.so.0.8 (0x00007f3c8e345000)
        libtbb.so.12 => /lib/x86_64-linux-gnu/libtbb.so.12 (0x00007f3c8e2e7000)
        libgmp.so.10 => /lib/x86_64-linux-gnu/libgmp.so.10 (0x00007f3c8e263000)
        libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f3c8dfe5000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3c8defa000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f3c8decc000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f3c8dcba000)
        libblosc.so.1 => /lib/x86_64-linux-gnu/libblosc.so.1 (0x00007f3c8dcaa000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f3c8dc8e000)
        libboost_iostreams.so.1.83.0 => /lib/x86_64-linux-gnu/libboost_iostreams.so.1.83.0 (0x00007f3c8dc77000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f3c91da6000)
        liblz4.so.1 => /lib/x86_64-linux-gnu/liblz4.so.1 (0x00007f3c8dc53000)
        libsnappy.so.1 => /lib/x86_64-linux-gnu/libsnappy.so.1 (0x00007f3c8dc48000)
        libzstd.so.1 => /lib/x86_64-linux-gnu/libzstd.so.1 (0x00007f3c8db8e000)
        libbz2.so.1.0 => /lib/x86_64-linux-gnu/libbz2.so.1.0 (0x00007f3c8db7a000)
        liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007f3c8db48000)
pschuster@VPEPC-Schuster:/mnt/c/Users/pschuster/source/repos/OpenVDB_Voxel$ ldd build/bin/JobController
        linux-vdso.so.1 (0x00007ffd9c481000)
        libzip.so.4 => /lib/x86_64-linux-gnu/libzip.so.4 (0x00007f690a9c8000)
        libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f690a74a000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f690a71c000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f690a50a000)
        libbz2.so.1.0 => /lib/x86_64-linux-gnu/libbz2.so.1.0 (0x00007f690a4f6000)
        libcrypto.so.3 => /lib/x86_64-linux-gnu/libcrypto.so.3 (0x00007f6909fe1000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f6909fc5000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f6909edc000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f690aa13000)
The excution of my code in currently controlled via bash scripts:
#!/bin/bash
# Bash script to launch JobController multiple times in parallel

# --- Configuration ---
GLOB_THREAD_COUNT=16
CHUNK="chunk_benchmark"
EXECUTABLE_PATH="/mnt/c/Users/pschuster/source/repos/OpenVDB_Voxel/build/bin/JobController"
EXECUTABLE_CHILD_PROCESS="/mnt/c/Users/pschuster/source/repos/OpenVDB_Voxel/build/bin/OpenVDB_Voxel"
MAIN_OUTPUT_DIR="/mnt/h/libzip_test/logs/benchmark_zip_wsl_debug"
GLOB_SOURCE_DIR="/mnt/h/ABC/ABC_parsed_files/ABC_${CHUNK}.zip"
GLOB_TARGET_DIR="/mnt/h/libzip_test/benchmark_zip"
GLOB_JOB_DIR="/mnt/h/libzip_test/job"
JOB_TYPE="zip_mode"

# Create necessary directories
if [ ! -d "$MAIN_OUTPUT_DIR" ]; then
    echo "Creating directory for output logs: $MAIN_OUTPUT_DIR"
    mkdir -p "$MAIN_OUTPUT_DIR"
fi
if [ ! -d "$GLOB_TARGET_DIR" ]; then
    echo "Creating glob target directory: $GLOB_TARGET_DIR"
    mkdir -p "$GLOB_TARGET_DIR"
fi

# Check if executable exists
if [ ! -f "$EXECUTABLE_PATH" ]; then
    echo "ERROR: Executable not found at $EXECUTABLE_PATH"
    read -n1 -r -p "Press any key to exit..."
    exit 1
fi
echo "Executable found: $EXECUTABLE_PATH"
echo

# --- Launch instances ---
for (( i=1; i<=GLOB_THREAD_COUNT; i++ )); do
    ID=$(printf "%03d" $i)
    INSTANCE_ID="Instance${ID}"
    APP_LOG="${MAIN_OUTPUT_DIR}/${INSTANCE_ID}_app_internal.log"
    JOB_LOC="${GLOB_JOB_DIR}/${INSTANCE_ID}.job"
    STDOUT_LOG="${MAIN_OUTPUT_DIR}/${INSTANCE_ID}_stdout.txt"
    STDERR_LOG="${MAIN_OUTPUT_DIR}/${INSTANCE_ID}_stderr.txt"

    echo "Launching $INSTANCE_ID..."
    echo "  App Log: $APP_LOG"
    echo "  JobLoc:  $JOB_LOC"
    echo "  Stdout:  $STDOUT_LOG"
    echo "  Stderr:  $STDERR_LOG"

    "$EXECUTABLE_PATH" "$JOB_TYPE" "$GLOB_SOURCE_DIR" "$GLOB_TARGET_DIR" "$JOB_LOC" "$APP_LOG" "$EXECUTABLE_CHILD_PROCESS" \
        > "$STDOUT_LOG" 2> "$STDERR_LOG" &
    echo
done

echo "All instances have been launched in the background."
echo "Check the \"$MAIN_OUTPUT_DIR\" directory for individual logs."
read -n1 -r -p "Press any key to exit..."
i want to mount the relvant directories
and set my parameters without rebuilding the container

using singularity-ce version 3.11.4